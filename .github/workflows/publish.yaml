name: 'Publish package'

on:
  workflow_call:
    secrets:
      BOT_ACCESS_KEY:
        required: true
        description: 'AWS Access Key Id'
      BOT_SECRET_KEY:
        required: true
        description: 'AWS Secret Access Key'
      S3_BUCKET:
        required: true
        description: 'AWS S3 Bucket to upload to'
      AWS_REGION:
        required: true
        description: 'AWS Region the S3 Bucket is located in'

jobs:
  publish:
    runs-on: ubuntu-20.04
    steps:
      - name: 'Checkout feature branch'
        uses: actions/checkout@v2
        with:
          path: 'feature'

      - name: 'Get Package and DHIS2 versions from tag'
        id: get_versions
        run: |
          VERSIONS="${GITHUB_REF_NAME#D}"
          PACKAGE_VERSION="${VERSIONS#*/}"
          DHIS2_VERSION="${VERSIONS%/*}"

          echo "::set-output name=package_version::$PACKAGE_VERSION"
          echo "::set-output name=dhis2_version::$DHIS2_VERSION"

      - name: 'Prepare packages for archiving'
        id: move_packages
        uses: dhis2-metadata/prepare@v1
        with:
          working_dir: 'feature'
          package_version: ${{ steps.get_versions.outputs.package_version }}

      - name: 'Generate package reference files'
        id: generate_reference_files
        run: |
          npm install dev-otta/metadatareference

          packages=($(find ${{ steps.move_packages.outputs.archive_dir }} -type f -name "*.json" | sort))
          
          mkdir reference-files

          for package_path in "${packages[@]}"
          do
            cd "$GITHUB_WORKSPACE/$(dirname $package_path)"

            package_name=$(basename $package_path)

            sudo node $GITHUB_WORKSPACE/node_modules/metadatareference/reference.js $package_name

            cp "${package_name%.*}.xlsx" "$GITHUB_WORKSPACE/reference-files/"
          done

      - name: 'Checkout master branch'
        uses: actions/checkout@v2
        with:
          ref: 'master'
          path: 'master'

      - name: 'Convert installation guide to PDF'
        uses: baileyjm02/markdown-to-pdf@v1
        with:
          input_path: master/docs
          output_dir: master/docs/pdfs
          build_html: false

      - name: 'Move installation guide to archive dir'
        working-directory: 'master'
        run: |
          for file in docs/pdfs/*installation.pdf
          do
            file_name="$(basename $file)"
            sudo mv "$file" "../${{ steps.move_packages.outputs.archive_dir }}/${file_name%.pdf}-v${{ steps.get_versions.outputs.package_version }}.pdf"
          done

      - name: 'Archive packages'
        run: sudo zip -r "${{ steps.move_packages.outputs.archive_dir }}.zip" ${{ steps.move_packages.outputs.archive_dir }}

      - name: 'Upload packages archive'
        uses: prewk/s3-cp-action@v2
        with:
          aws_access_key_id: ${{ secrets.BOT_ACCESS_KEY }}
          aws_secret_access_key: ${{ secrets.BOT_SECRET_KEY }}
          aws_region: ${{ secrets.AWS_REGION }}
          source: "${{ steps.move_packages.outputs.archive_dir }}.zip"
          dest: "s3://${{ secrets.S3_BUCKET }}\
            /${{ steps.move_packages.outputs.package_locale }}\
            /${{ steps.move_packages.outputs.package_code }}\
            /${{ steps.get_versions.outputs.package_version }}\
            /DHIS${{ steps.get_versions.outputs.dhis2_version }}\
            /${{ steps.move_packages.outputs.archive_dir }}.zip"

      - name: 'Upload all reference files next to archive'
        uses: prewk/s3-cp-action@v2
        with:
          aws_access_key_id: ${{ secrets.BOT_ACCESS_KEY }}
          aws_secret_access_key: ${{ secrets.BOT_SECRET_KEY }}
          aws_region: ${{ secrets.AWS_REGION }}
          source: "reference-files/"
          dest: "s3://${{ secrets.S3_BUCKET }}\
            /${{ steps.move_packages.outputs.package_locale }}\
            /${{ steps.move_packages.outputs.package_code }}\
            /${{ steps.get_versions.outputs.package_version }}\
            /DHIS${{ steps.get_versions.outputs.dhis2_version }}/"
          flags: --recursive

      - name: 'Get release notes file'
        id: get_release_notes
        run: echo "::set-output name=release_notes::$(find . -name *release_note-${{ steps.get_versions.outputs.package_version }}.md)"

      - name: 'Find release ID'
        id: find_release
        uses: cardinalby/git-get-release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ github.ref_name }}

      - name: 'Update Release description'
        uses: irongut/editrelease@v1.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          id: ${{ steps.find_release.outputs.id }}
          body: "Package uploaded to https://${{ secrets.S3_BUCKET }}\
            /${{ steps.move_packages.outputs.package_locale }}\
            /${{ steps.move_packages.outputs.package_code }}\
            /${{ steps.get_versions.outputs.package_version }}\
            /DHIS${{ steps.get_versions.outputs.dhis2_version }}\
            /${{ steps.move_packages.outputs.archive_dir }}.zip"
          files: "${{ steps.get_release_notes.outputs.release_notes }}"
